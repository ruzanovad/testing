{
	"info": {
		"_postman_id": "4a78b8e6-77dd-49a2-8bd8-4507b493bd62",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43575997",
		"_collection_link": "https://dariar-8112772.postman.co/workspace/petstore~1935bf42-eb0e-460b-ae97-db26fc04c25b/collection/43575997-4a78b8e6-77dd-49a2-8bd8-4507b493bd62?action=share&source=collection_link&creator=43575997"
	},
	"item": [
		{
			"name": "store",
			"item": [
				{
					"name": "inventory",
					"item": [
						{
							"name": "Returns pet inventories by status",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "api_key",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								},
								"description": "Returns a map of status codes to quantities"
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "api_key",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/store/inventory",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"inventory"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"dolore8\": \"<integer>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "order",
					"item": [
						{
							"name": "{orderId}",
							"item": [
								{
									"name": "Find purchase order by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"testCase\") !== \"invalid\") {",
													"    const requestBody = {",
													"        id: parseInt(pm.environment.get(\"id\")),",
													"        petId: parseInt(pm.environment.get(\"petId\")),",
													"        quantity: parseInt(pm.environment.get(\"quantity\")),",
													"        shipDate: pm.environment.get(\"shipDate\"),",
													"        status: pm.environment.get(\"status\"),",
													"        complete: pm.environment.get(\"complete\")",
													"    };",
													"",
													"    pm.sendRequest({",
													"        url: pm.collectionVariables.get(\"baseUrl\") + \"/store/order\",",
													"        method: 'POST',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'Accept' : 'application/json'",
													"        },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(requestBody)",
													"        }",
													"    }, function (err, res) {",
													"        if (err) {",
													"            console.log(\"Error creating order:\", err);",
													"        } else {",
													"            console.log(\"Order created:\", res.json());",
													"            pm.environment.set(\"orderId\", res.json().id); ",
													"        }",
													"    });",
													"} else {",
													"    pm.variables.set(\"orderId\", -3434);",
													"}",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"testCase\") === \"valid\") {",
													"    pm.test(\"Valid case - status 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response has correct structure\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"id\");",
													"    pm.expect(jsonData).to.have.property(\"petId\");",
													"    pm.expect(jsonData).to.have.property(\"quantity\");",
													"    pm.expect(jsonData).to.have.property(\"shipDate\");",
													"    pm.expect(jsonData).to.have.property(\"status\");",
													"}) ;",
													"}",
													"else {",
													"    pm.test(\"Id not found - status 404\", () => {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/store/order/{{orderId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												"{{orderId}}"
											]
										},
										"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
									},
									"response": [
										{
											"name": "successful operation",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}"
										},
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Delete purchase order by ID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (pm.environment.get(\"testCase\") !== \"invalid\") {",
													"    const requestBody = {",
													"        id: parseInt(pm.environment.get(\"id\")),",
													"        petId: parseInt(pm.environment.get(\"petId\")),",
													"        quantity: parseInt(pm.environment.get(\"quantity\")),",
													"        shipDate: pm.environment.get(\"shipDate\"),",
													"        status: pm.environment.get(\"status\"),",
													"        complete: pm.environment.get(\"complete\")",
													"    };",
													"",
													"    pm.sendRequest({",
													"        url: pm.collectionVariables.get(\"baseUrl\") + \"/store/order\",",
													"        method: 'POST',",
													"        header: {",
													"            'Content-Type': 'application/json',",
													"            'Accept' : 'application/json'",
													"        },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: JSON.stringify(requestBody)",
													"        }",
													"    }, function (err, res) {",
													"        if (err) {",
													"            console.log(\"Error creating order:\", err);",
													"        } else {",
													"            console.log(\"Order created:\", res.json());",
													"            pm.environment.set(\"orderId\", res.json().id); ",
													"        }",
													"    });",
													"} else {",
													"    pm.variables.set(\"orderId\", -3434);",
													"}",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.environment.get(\"testCase\") === \"valid\") {",
													"    pm.test(\"Valid case - status 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response has correct structure\", function () {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData).to.have.property(\"message\");",
													"        pm.expect(jsonData.message).to.eql(pm.variables.get(\"orderId\").toString());",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Id not found - status 404\", () => {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/store/order/{{orderId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order",
												"{{orderId}}"
											]
										},
										"description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors"
									},
									"response": [
										{
											"name": "Invalid ID supplied",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Order not found",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/store/order/:orderId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"store",
														"order",
														":orderId"
													],
													"variable": [
														{
															"key": "orderId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Place an order for a pet",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const requestBody = {",
											"        id: pm.environment.get(\"id\"),",
											"        petId : pm.environment.get(\"petId\"),",
											"        quantity : pm.environment.get(\"quantity\"),",
											"        shipDate : pm.environment.get(\"shipDate\"),",
											"        status : pm.environment.get(\"status\"),",
											"        complete : pm.environment.get(\"complete\")",
											"    };",
											"    ",
											"pm.request.body.update(JSON.stringify(requestBody));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.environment.get(\"testCase\") === \"valid\") {",
											"    pm.test(\"Valid case - status 200\", () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    pm.test(\"Response has correct structure\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"petId\");",
											"    pm.expect(jsonData).to.have.property(\"quantity\");",
											"    pm.expect(jsonData).to.have.property(\"shipDate\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"});",
											"}",
											"",
											"// не получается сломать этот метод, что бы не посылала - ответ 200",
											"// } else {",
											"//     pm.test(\"Invalid case - status 400\", () => {",
											"//         pm.response.to.have.status(400);",
											"//     });",
											"// }",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 0,\n    \"petId\": 0,\n    \"quantity\": 2,\n    \"shipDate\": \"2025-03-29T07:28:43.662Z\",\n    \"status\": \"placed\",\n    \"complete\": true\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/store/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"order"
									]
								}
							},
							"response": [
								{
									"name": "successful operation",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}"
								},
								{
									"name": "Invalid Order",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"petId\": \"<long>\",\n  \"quantity\": \"<integer>\",\n  \"shipDate\": \"<dateTime>\",\n  \"status\": \"placed\",\n  \"complete\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/store/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"store",
												"order"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2"
		}
	]
}